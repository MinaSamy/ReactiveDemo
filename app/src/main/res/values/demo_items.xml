<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="observable">Observable</string>
    <string name="observable_short_desc">An <b>Observable</b> emits items to subscribers in hot or cold fashion.
    Observables <b>subscribes</b> to observables to get notified when an observable emits an item</string>
    <string name="observable_desc">An <b>Observable</b> emits items to observers by calling <b>observer.onNext(T item)</b>.
    When all items are emitted, the observable can notify the observer by calling <b>observer.onCompleted()</b></string>

    <string name="observable_from">Observable.from()</string>
    <string name="observable_from_short_desc">An <b>Observable</b> emits items from an array/collection to subscribers. It emits items one
     by one saving us the need to iterate the array/collection</string>
    <string name="observable_from_desc">An <b>Observable</b> emits items to from a list, saving us the need to emit items
    one by one and calling <b>observer.onNext()</b> and <b>observer.onCompleted()</b> manually</string>

    <string name="observable_just">Observable.just()</string>
    <string name="observable_just_short_desc">An <b>Observable</b> emits items returned from a method. Here the method
    returns a list (not individual items as in the previous examples).</string>
    <string name="observable_just_desc">An <b>Observable</b> emits items returned from an existing method.
     For example it will emit a whole list returned from a method, it won\'t iterate the items in the list.
    We can <b>just</b> to have more organized and testable code</string>
    
    <string name="publish_subject">Publish Subject</string>
    <string name="publish_subject_short_desc">A <b>Subject</b> can as an observable and an observer in the same time.
    It can subscribe to an observable or to itself, thus acting as an observer in both cases</string>
    <string name="publish_subject_desc">A <b>Subject</b> can as an observable and an observer in the same time.
    It can subscribe to an observable or to itself, thus acting as an observer in both cases</string>

    <string name="behavior_subject">Behavior Subject</string>
    <string name="behavior_subject_short_desc">A <b>Subject</b> that emits the most recent item it has observed
        and all the subsequent items.</string>
    <string name="behavior_subject_desc">A <b>Subject</b> that emits the most recent item it has observed
        and all the subsequent items. All items emited before observation are lost.</string>

    <string name="replay_subject">Replay Subject</string>
    <string name="replay_subject_short_desc">A <b>Subject</b> that buffers all items that were produced before subscription
    and emits them to the observer once it subscribes</string>
    <string name="replay_subject_desc">A <b>Subject</b> that buffers all items that were produced before subscription
    and emits them to the observer once it subscribes</string>

    <string name="async_subject">Async Subject</string>
    <string name="async_subject_short_desc">A <b>Subject</b> that publishes only the last item the observable has emitted.</string>
    <string name="async_subject_desc">A <b>Subject</b> that publishes only the last item the observable has emitted.</string>
    
    <string name="repeat">Repeat</string>
    <string name="repeat_short_desc"><b>Observable.repeat()</b> repeats the items emitted by the observable.</string>
    <string name="repeat_desc"><b>Observable.repeat()</b> repeats the items emitted by the observable.</string>

    <string name="defer">Defer</string>
    <string name="defer_short_desc">An <b>Observable</b> that create other observable instances from a factory method.
        The observables creation is deferred until an <b>Observer</b>
     subscribes to it.</string>
    <string name="defer_desc">An <b>Observable</b> that calls a factory method to create another new observable instance
        for each new observer that subscribes to it, the observable creation is deferred until the <b>Observer</b>
     subscribes to it.</string>

    <string name="range">Range</string>
    <string name="range_short_desc">An <b>Observable</b> that emits items from a list, items are specified by the
    starting index and the number of items to emit.</string>
    <string name="range_desc">An <b>Observable</b> that emits items from a list, items are specified by the
    starting index and the number of items to emit.</string>

    <string name="interval">Interval</string>
    <string name="interval_short_desc">An <b>Observable</b> that emits items every n time unit. In this example the observable
     emits a new item every 3 seconds.</string>
    <string name="interval_desc">An <b>Observable</b> that emits items every n time unit. In this example the observable
     emits a new item every 3 seconds.</string>

    <string name="timer">Timer</string>
    <string name="timer_short_desc">An <b>Observable</b> that emits an item after n time unit. It can also act as <b>Interval</b>
    by emitting items after n time units each m time units.</string>
    <string name="timer_desc">An <b>Observable</b> that emits an item after n time unit. It can also act as <b>Interval</b>
    by emitting items after n time units each m time units.</string>

    <string name="filter">Filter</string>
    <string name="filter_short_desc">An <b>Observable</b> that emits items that pass a filter function, in this
     example we emit even number items only.</string>
    <string name="filter_desc">An <b>Observable</b> that emits items that pass a filter function, in this
     example we emit even number items only.</string>

    <string name="take">Take</string>
    <string name="take_short_desc">An <b>Observable</b> emits only the first N items from a sequence then completes</string>
    <string name="take_desc">An <b>Observable</b> emits only the first N items from a sequence then completes</string>

    <string name="take_last">Take Last</string>
    <string name="take_last_short_desc">An <b>Observable</b> that emits last N items from a sequence.
     In this example we emit the last two items from the list.</string>
    <string name="take_last_desc">An <b>Observable</b> that emits last N items from a sequence.
     In this example we emit the last two items from the list.</string>

    <string name="distinct">Distinct</string>
    <string name="distinct_short_desc">An <b>Observable</b> that emits unique items from a sequence, it gets
    rid of duplicate items</string>
    <string name="distinct_desc">An <b>Observable</b> that emits unique items from a sequence, it gets
    rid of duplicate items</string>

    <string name="distinct_until_changed">Distinct Until Changed</string>
    <string name="distinct_until_changed_short_desc">An <b>Observable</b> that emits unique items from a sequence, it notifies
    the observer when a new unique item - that\'s different than the previous items - is emitted</string>
    <string name="distinct_until_changed_desc">An <b>Observable</b> that emits unique items from a sequence, it notifies
    the observer when a new unique item - that\'s different than the previous items - is emitted</string>

    <string name="first">First</string>
    <string name="first_short_desc">An <b>Observable</b> that emits the first item from a sequence. The first item can be
    determined by a predicate function.</string>
    <string name="first_desc">An <b>Observable</b> that emits the first item from a sequence. The first item can be
    determined by a predicate function. There is another variant called <b>firstOrDefault()</b> that provides a default value if the observable doesn\'t
     emit an item that satisfies the predicate.</string>

    <string name="last">Last</string>
    <string name="last_short_desc">An <b>Observable</b> that emits the last item from a sequence. The last item can be
    determined by a predicate function.</string>
    <string name="last_desc">An <b>Observable</b> that emits the last item from a sequence. The last item can be
    determined by a predicate function. There is another variant called <b>lastOrDefault()</b> that provides a default value if the observable doesn\'t
     emit an item that satisfies the predicate.</string>

    <string name="skip">Skip</string>
    <string name="skip_short_desc">An <b>Observable</b> that skips the emitting the first N items.</string>
    <string name="skip_desc">An <b>Observable</b> that skips the emitting the first N items.</string>

    <string name="skip_last">Skip Last</string>
    <string name="skip_last_short_desc">An <b>Observable</b> that skips the emitting the last N items.</string>
    <string name="skip_last_desc">An <b>Observable</b> that skips the emitting the last N items.</string>

    <string name="sample">Sample</string>
    <string name="sample_short_desc">An <b>Observable</b> that emits the most recent emitted item from another observable
        in a certain periodic time interval</string>
    <string name="sample_desc">An <b>Observable</b> that emits the most recent emitted item from another observable
        in a certain periodic time interval. In this example an observable emits items every 3 seconds, another observable
    emits the last item emitted every 5 seconds</string>

    <string name="throttle_first">Throttle First</string>
    <string name="throttle_first_short_desc">An <b>Observable</b> that emits the first emitted item from another observable
        in a certain time window</string>
    <string name="throttle_first_desc">An <b>Observable</b> that emits the first emitted item from another observable
        in a certain time window. In this example an observable emits items every second, another observable
    emits the first item emitted within the 5 seconds window</string>

    <string name="throttle_last">Throttle Last</string>
    <string name="throttle_last_short_desc">An <b>Observable</b> that emits the last emitted item from another observable
        in a certain time window</string>
    <string name="throttle_last_desc">An <b>Observable</b> that emits the last emitted item from another observable
        in a certain time window. In this example an observable emits items every second, another observable
    emits the last item emitted within the 5 seconds window</string>

    <string name="map">Map</string>
    <string name="map_short_desc">Applies a specific <b>Func</b> object on each item emitted by the observable.</string>
    <string name="map_desc">Applies a specific <b>Func</b> object on each item emitted by the observable. In this
    example we apply a <b>Func</b> multiply each emitted item by 2.</string>

    <string name="flat_map">FlatMap</string>
    <string name="flat_map_short_desc">An <b>Observable</b> that takes the items emitted from one observable and emits the items of another one. It can
     convert the form of items emitted from an observable to another form.</string>
    <string name="flat_map_desc">An <b>Observable</b> that takes the items emitted from one observable and emits the items of another one. It can
     convert the form of items emitted from an observable to another form. In this example we have an observable that emits a list of strings, we apply
    a <b>FlatMap</b> operator that returns an <b>obsrvable.from()</b> object that enables subscribers to observe each item individually
     instead of observing the whole list as the first observable intended.</string>

</resources>