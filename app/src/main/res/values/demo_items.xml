<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="observable">Observable</string>
    <string name="observable_short_desc">An <b>Observable</b> emits items to subscribers in hot or cold fashion.
    Observables <b>subscribes</b> to observables to get notified when an observable emits an item</string>
    <string name="observable_desc">An <b>Observable</b> emits items to observers by calling <b>observer.onNext(T item)</b>.
    When all items are emitted, the observable can notify the observer by calling <b>observer.onCompleted()</b></string>

    <string name="observable_from">Observable.from()</string>
    <string name="observable_from_short_desc">An <b>Observable</b> emits items from an array/collection to subscribers. It emits items one
     by one saving us the need to iterate the array/collection</string>
    <string name="observable_from_desc">An <b>Observable</b> emits items to from a list, saving us the need to emit items
    one by one and calling <b>observer.onNext()</b> and <b>observer.onCompleted()</b> manually</string>

    <string name="observable_just">Observable.just()</string>
    <string name="observable_just_short_desc">An <b>Observable</b> emits items returned from a method. Here the method
    returns a list (not individual items as in the previous examples).</string>
    <string name="observable_just_desc">An <b>Observable</b> emits items returned from an existing method.
     For example it will emit a whole list returned from a method, it won\'t iterate the items in the list.
    We can <b>just</b> to have more organized and testable code</string>
    
    <string name="publish_subject">Publish Subject</string>
    <string name="publish_subject_short_desc">A <b>Subject</b> can as an observable and an observer in the same time.
    It can subscribe to an observable or to itself, thus acting as an observer in both cases</string>
    <string name="publish_subject_desc">A <b>Subject</b> can as an observable and an observer in the same time.
    It can subscribe to an observable or to itself, thus acting as an observer in both cases</string>

    <string name="behavior_subject">Behavior Subject</string>
    <string name="behavior_subject_short_desc">A <b>Subject</b> that emits the most recent item it has observed
        and all the subsequent items.</string>
    <string name="behavior_subject_desc">A <b>Subject</b> that emits the most recent item it has observed
        and all the subsequent items. All items emited before observation are lost.</string>

    <string name="replay_subject">Replay Subject</string>
    <string name="replay_subject_short_desc">A <b>Subject</b> that buffers all items that were produced before subscription
    and emits them to the observer once it subscribes</string>
    <string name="replay_subject_desc">A <b>Subject</b> that buffers all items that were produced before subscription
    and emits them to the observer once it subscribes</string>

    <string name="async_subject">Async Subject</string>
    <string name="async_subject_short_desc">A <b>Subject</b> that publishes only the last item the observable has emitted.</string>
    <string name="async_subject_desc">A <b>Subject</b> that publishes only the last item the observable has emitted.</string>
    
    <string name="repeat">Repeat</string>
    <string name="repeat_short_desc"><b>Observable.repeat()</b> repeats the items emitted by the observable.</string>
    <string name="repeat_desc"><b>Observable.repeat()</b> repeats the items emitted by the observable.</string>

    <string name="defer">Defer</string>
    <string name="defer_short_desc">An <b>Observable</b> that create other observable instances from a factory method.
        The observables creation is deferred until an <b>Observer</b>
     subscribes to it.</string>
    <string name="defer_desc">An <b>Observable</b> that calls a factory method to create another new observable instance
        for each new observer that subscribes to it, the observable creation is deferred until the <b>Observer</b>
     subscribes to it.</string>

    <string name="range">Range</string>
    <string name="range_short_desc">An <b>Observable</b> that emits items from a list, items are specified by the
    starting index and the number of items to emit.</string>
    <string name="range_desc">An <b>Observable</b> that emits items from a list, items are specified by the
    starting index and the number of items to emit.</string>

</resources>